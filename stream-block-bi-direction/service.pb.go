// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package streamblock is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	LeaderRequest
	ObserveResponse
*/
package streamblock

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LeaderRequest struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *LeaderRequest) Reset()                    { *m = LeaderRequest{} }
func (m *LeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaderRequest) ProtoMessage()               {}
func (*LeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LeaderRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ObserveResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ObserveResponse) Reset()                    { *m = ObserveResponse{} }
func (m *ObserveResponse) String() string            { return proto.CompactTextString(m) }
func (*ObserveResponse) ProtoMessage()               {}
func (*ObserveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ObserveResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*LeaderRequest)(nil), "streamblock.LeaderRequest")
	proto.RegisterType((*ObserveResponse)(nil), "streamblock.ObserveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Election service

type ElectionClient interface {
	Observe(ctx context.Context, opts ...grpc.CallOption) (Election_ObserveClient, error)
}

type electionClient struct {
	cc *grpc.ClientConn
}

func NewElectionClient(cc *grpc.ClientConn) ElectionClient {
	return &electionClient{cc}
}

func (c *electionClient) Observe(ctx context.Context, opts ...grpc.CallOption) (Election_ObserveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Election_serviceDesc.Streams[0], c.cc, "/streamblock.Election/Observe", opts...)
	if err != nil {
		return nil, err
	}
	x := &electionObserveClient{stream}
	return x, nil
}

type Election_ObserveClient interface {
	Send(*LeaderRequest) error
	Recv() (*ObserveResponse, error)
	grpc.ClientStream
}

type electionObserveClient struct {
	grpc.ClientStream
}

func (x *electionObserveClient) Send(m *LeaderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *electionObserveClient) Recv() (*ObserveResponse, error) {
	m := new(ObserveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Election service

type ElectionServer interface {
	Observe(Election_ObserveServer) error
}

func RegisterElectionServer(s *grpc.Server, srv ElectionServer) {
	s.RegisterService(&_Election_serviceDesc, srv)
}

func _Election_Observe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ElectionServer).Observe(&electionObserveServer{stream})
}

type Election_ObserveServer interface {
	Send(*ObserveResponse) error
	Recv() (*LeaderRequest, error)
	grpc.ServerStream
}

type electionObserveServer struct {
	grpc.ServerStream
}

func (x *electionObserveServer) Send(m *ObserveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *electionObserveServer) Recv() (*LeaderRequest, error) {
	m := new(LeaderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Election_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamblock.Election",
	HandlerType: (*ElectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Observe",
			Handler:       _Election_Observe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2e, 0x2e, 0x29, 0x4a, 0x4d,
	0xcc, 0x4d, 0xca, 0xc9, 0x4f, 0xce, 0x56, 0x52, 0xe6, 0xe2, 0xf5, 0x49, 0x4d, 0x4c, 0x49, 0x2d,
	0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x54, 0xb9, 0xf8, 0xfd, 0x93, 0x40, 0x86,
	0xa4, 0x06, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x62, 0x53, 0x66, 0x14, 0xca, 0xc5, 0xe1,
	0x9a, 0x93, 0x9a, 0x5c, 0x92, 0x99, 0x9f, 0x27, 0xe4, 0xc9, 0xc5, 0x0e, 0xd5, 0x22, 0x24, 0xa5,
	0x87, 0x64, 0xa1, 0x1e, 0x8a, 0x6d, 0x52, 0x32, 0x28, 0x72, 0x68, 0x96, 0x28, 0x31, 0x68, 0x30,
	0x1a, 0x30, 0x26, 0xb1, 0x81, 0x9d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x91, 0x2b, 0x9b,
	0xfc, 0xc7, 0x00, 0x00, 0x00,
}
